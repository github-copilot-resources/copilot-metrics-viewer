// Generated by Copilot
import { defineEventHandler, readBody } from 'h3';
import type { CopilotMetrics } from "@/model/Copilot_Metrics";
import { convertToMetrics } from '@/model/MetricsToUsageConverter';
import type { MetricsApiResponse } from "@/types/metricsApiResponse";
import { readFileSync } from 'fs';
import { resolve } from 'path';

export default defineEventHandler(async (event) => {
    const body = await readBody(event);
    const { teams = [], organization } = body; // Generated by Copilot: Extract organization from request body
    const config = useRuntimeConfig(event);
    
    // Generated by Copilot: Use organization from request body if provided
    const orgName = organization || config.public.githubOrg;
    console.log(`Using organization: ${orgName} for teams metrics`);
    
    if (!event.context.headers.has('Authorization')) {
        return new Response('No Authentication provided', { status: 401 });
    }

    const allMetrics = [];
    const teamMetrics = [];

    // If mock mode is enabled
    if (config.public.isDataMocked) {
        const mockedDataPath = resolve('public/mock-data/organization_metrics_response_sample.json');
        const data = readFileSync(mockedDataPath, 'utf8');
        const dataJson = JSON.parse(data);
        const usageData = ensureCopilotMetrics(dataJson);
        const metricsData = convertToMetrics(usageData);

        // Replicate mock data for each team
        for (const team of teams) {
            teamMetrics.push({ team, metrics: metricsData });
            allMetrics.push(...metricsData);
        }

        return { metrics: allMetrics, teamMetrics };
    }

    // Get team slugs for proper URL formatting
    const teamsWithSlugs = await getTeams(event, orgName); // Generated by Copilot: Pass orgName to getTeams
    const teamMap = new Map(teamsWithSlugs.map(team => [team.name, team.slug]));

    // Handle real API calls
    for (const team of teams) {
        try {
            console.log(`Fetching metrics for team: ${team}`);
            const teamSlug = teamMap.get(team) || team.toLowerCase().replace(/\s+/g, '-');
            const apiUrl = `https://api.github.com/orgs/${orgName}/teams/${teamSlug}/copilot/metrics`;
            
            const response = await $fetch(apiUrl, {
                headers: event.context.headers
            }) as unknown[];
            
            if (response) {
                const usageData = ensureCopilotMetrics(response);
                const metricsData = convertToMetrics(usageData);
                
                teamMetrics.push({ team, metrics: metricsData });
                allMetrics.push(...metricsData);
            }
        } catch (error) {
            console.error(`Error fetching metrics for team ${team}:`, error);
        }
    }

    // Sort teams by name for consistent display
    teamMetrics.sort((a, b) => a.team.localeCompare(b.team));

    return { metrics: allMetrics, teamMetrics };
});

// Helper function to get teams
async function getTeams(event: any, orgName: string): Promise<{ name: string; slug: string }[]> { // Generated by Copilot: Add orgName parameter
    const config = useRuntimeConfig(event);
    const body = await readBody(event);
    const { organization } = body; // Generated by Copilot: Extract organization from request body
    
    // Generated by Copilot: Use organization from request body if provided
    orgName = organization || orgName; // Generated by Copilot: Use orgName parameter
    
    try {
        // If teams are configured in config, use them directly
        if (config.public.githubTeam && config.public.githubTeam.trim() !== '') {
            return config.public.githubTeam.split(',').map(team => ({
                name: team.trim(),
                slug: team.trim().toLowerCase().replace(/\s+/g, '-')
            }));
        }

        // Fetch teams from GitHub API
        console.log(`Fetching teams for organization: ${orgName}`);
        const response = await $fetch(`https://api.github.com/orgs/${orgName}/teams`, {
            headers: event.context.headers
        }) as any[];

        if (!Array.isArray(response)) {
            throw new Error('Invalid response format from GitHub API');
        }
        
        return response.map(team => ({
            name: team.name || team.slug,
            slug: team.slug || team.name?.toLowerCase().replace(/\s+/g, '-')
        }));
    } catch (error: any) {
        console.error('Error fetching teams:', error.message);
        throw error;
    }
}

// Helper function from metrics.ts
function ensureCopilotMetrics(data: any[]): CopilotMetrics[] {
    return data.map(item => {
        if (!item.copilot_ide_code_completions) {
            item.copilot_ide_code_completions = { editors: [], total_engaged_users: 0, languages: [] };
        }
        item.copilot_ide_code_completions.editors?.forEach((editor: any) => {
            editor.models?.forEach((model: any) => {
                if (!model.languages) {
                    model.languages = [];
                }
            });
        });
        return item as CopilotMetrics;
    });
}